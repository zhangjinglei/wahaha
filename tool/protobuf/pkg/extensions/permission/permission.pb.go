// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: permission.proto

package permission

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//httpmethod：get，post
//如果不想提供http接口，可以 method:"no"
type HttpMethod int32

const (
	HttpMethod_No   HttpMethod = 0
	HttpMethod_Get  HttpMethod = 1
	HttpMethod_Post HttpMethod = 2
)

var HttpMethod_name = map[int32]string{
	0: "No",
	1: "Get",
	2: "Post",
}

var HttpMethod_value = map[string]int32{
	"No":   0,
	"Get":  1,
	"Post": 2,
}

func (x HttpMethod) String() string {
	return proto.EnumName(HttpMethod_name, int32(x))
}

func (HttpMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c837ef01cbda0ad8, []int{0}
}

type Permission int32

const (
	Permission_IgnoreLogin           Permission = 0
	Permission_LoginWithNoPermission Permission = 1
	Permission_NeedPerm              Permission = 2
)

var Permission_name = map[int32]string{
	0: "IgnoreLogin",
	1: "LoginWithNoPermission",
	2: "NeedPerm",
}

var Permission_value = map[string]int32{
	"IgnoreLogin":           0,
	"LoginWithNoPermission": 1,
	"NeedPerm":              2,
}

func (x Permission) String() string {
	return proto.EnumName(Permission_name, int32(x))
}

func (Permission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c837ef01cbda0ad8, []int{1}
}

type HttpRule struct {
	Method HttpMethod `protobuf:"varint,1,opt,name=method,proto3,enum=bidewu.HttpMethod" json:"method,omitempty"`
	//权限
	Perm                 Permission `protobuf:"varint,2,opt,name=perm,proto3,enum=bidewu.Permission" json:"perm,omitempty"`
	Permcode             string     `protobuf:"bytes,3,opt,name=permcode,proto3" json:"permcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HttpRule) Reset()         { *m = HttpRule{} }
func (m *HttpRule) String() string { return proto.CompactTextString(m) }
func (*HttpRule) ProtoMessage()    {}
func (*HttpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_c837ef01cbda0ad8, []int{0}
}
func (m *HttpRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpRule.Merge(m, src)
}
func (m *HttpRule) XXX_Size() int {
	return m.Size()
}
func (m *HttpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpRule.DiscardUnknown(m)
}

var xxx_messageInfo_HttpRule proto.InternalMessageInfo

func (m *HttpRule) GetMethod() HttpMethod {
	if m != nil {
		return m.Method
	}
	return HttpMethod_No
}

func (m *HttpRule) GetPerm() Permission {
	if m != nil {
		return m.Perm
	}
	return Permission_IgnoreLogin
}

func (m *HttpRule) GetPermcode() string {
	if m != nil {
		return m.Permcode
	}
	return ""
}

var E_Http = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MethodOptions)(nil),
	ExtensionType: (*HttpRule)(nil),
	Field:         72295628,
	Name:          "bidewu.http",
	Tag:           "bytes,72295628,opt,name=http",
	Filename:      "permission.proto",
}

func init() {
	proto.RegisterEnum("bidewu.HttpMethod", HttpMethod_name, HttpMethod_value)
	proto.RegisterEnum("bidewu.Permission", Permission_name, Permission_value)
	proto.RegisterType((*HttpRule)(nil), "bidewu.HttpRule")
	proto.RegisterExtension(E_Http)
}

func init() { proto.RegisterFile("permission.proto", fileDescriptor_c837ef01cbda0ad8) }

var fileDescriptor_c837ef01cbda0ad8 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x3b, 0x69, 0xc9, 0x97, 0xef, 0x56, 0xec, 0x30, 0x50, 0x88, 0x5d, 0x84, 0xd0, 0x85,
	0x96, 0x2e, 0x52, 0xa8, 0x3b, 0x5d, 0x19, 0xd4, 0xb6, 0xa0, 0xb5, 0x04, 0x4b, 0xd1, 0x9d, 0x6d,
	0xc6, 0x64, 0xa0, 0xcd, 0x0d, 0xc9, 0x04, 0xc1, 0x27, 0x71, 0xed, 0x73, 0xf8, 0x00, 0x0a, 0x2e,
	0x7c, 0x04, 0xa9, 0x2f, 0x22, 0x99, 0xd8, 0x46, 0x57, 0x73, 0xff, 0xfc, 0x38, 0x73, 0x38, 0x17,
	0x68, 0xcc, 0x93, 0x95, 0x48, 0x53, 0x81, 0x91, 0x13, 0x27, 0x28, 0x91, 0xe9, 0x73, 0xe1, 0xf3,
	0x87, 0xac, 0x65, 0x07, 0x88, 0xc1, 0x92, 0xf7, 0xd4, 0x74, 0x9e, 0xdd, 0xf7, 0x7c, 0x9e, 0x2e,
	0x12, 0x11, 0x4b, 0x4c, 0x0a, 0xb2, 0xfd, 0x08, 0xc6, 0x50, 0xca, 0xd8, 0xcb, 0x96, 0x9c, 0x75,
	0x41, 0x5f, 0x71, 0x19, 0xa2, 0x6f, 0x12, 0x9b, 0x74, 0x76, 0xfb, 0xcc, 0x29, 0x64, 0x9c, 0x9c,
	0xb8, 0x54, 0x1b, 0xef, 0x87, 0x60, 0xfb, 0x50, 0xcb, 0x7f, 0x35, 0xb5, 0xbf, 0xe4, 0x64, 0xeb,
	0xc4, 0x53, 0x7b, 0xd6, 0x02, 0x23, 0x7f, 0x17, 0xe8, 0x73, 0xb3, 0x6a, 0x93, 0xce, 0x7f, 0x6f,
	0xdb, 0x77, 0x0f, 0x00, 0x4a, 0x65, 0xa6, 0x83, 0x36, 0x46, 0x5a, 0x61, 0xff, 0xa0, 0x3a, 0xe0,
	0x92, 0x12, 0x66, 0x40, 0x6d, 0x82, 0xa9, 0xa4, 0x5a, 0xf7, 0x1c, 0xa0, 0x14, 0x66, 0x0d, 0xa8,
	0x8f, 0x82, 0x08, 0x13, 0x7e, 0x81, 0x81, 0x88, 0x68, 0x85, 0xed, 0x41, 0x53, 0x95, 0x33, 0x21,
	0xc3, 0x31, 0x96, 0x24, 0x25, 0x6c, 0x07, 0x8c, 0x31, 0xe7, 0x7e, 0x3e, 0xa3, 0xda, 0xd1, 0x00,
	0x6a, 0xa1, 0x94, 0x31, 0xb3, 0x9c, 0x22, 0x17, 0x67, 0x93, 0x8b, 0x53, 0x78, 0xb8, 0x8a, 0xa5,
	0xc0, 0x28, 0x35, 0xdf, 0xdf, 0x5e, 0xda, 0x36, 0xe9, 0xd4, 0xfb, 0xf4, 0x77, 0x02, 0x79, 0x46,
	0x9e, 0x12, 0x70, 0x6f, 0x5e, 0xd7, 0x16, 0xf9, 0x58, 0x5b, 0xe4, 0x73, 0x6d, 0x91, 0xa7, 0x2f,
	0xab, 0x02, 0x8d, 0x05, 0xae, 0x36, 0xf0, 0x5d, 0x26, 0x43, 0x97, 0xba, 0xaa, 0x29, 0xdd, 0x4c,
	0xc8, 0x6d, 0xb3, 0x3c, 0xd4, 0x71, 0x59, 0x3e, 0x6b, 0xe0, 0x8e, 0x4e, 0xcf, 0x66, 0xd3, 0x93,
	0xe9, 0xf5, 0x70, 0xae, 0x2b, 0x4f, 0x87, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xd3, 0x00,
	0x02, 0xd5, 0x01, 0x00, 0x00,
}

func (m *HttpRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Permcode) > 0 {
		i -= len(m.Permcode)
		copy(dAtA[i:], m.Permcode)
		i = encodeVarintPermission(dAtA, i, uint64(len(m.Permcode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Perm != 0 {
		i = encodeVarintPermission(dAtA, i, uint64(m.Perm))
		i--
		dAtA[i] = 0x10
	}
	if m.Method != 0 {
		i = encodeVarintPermission(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPermission(dAtA []byte, offset int, v uint64) int {
	offset -= sovPermission(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HttpRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovPermission(uint64(m.Method))
	}
	if m.Perm != 0 {
		n += 1 + sovPermission(uint64(m.Perm))
	}
	l = len(m.Permcode)
	if l > 0 {
		n += 1 + l + sovPermission(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPermission(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPermission(x uint64) (n int) {
	return sovPermission(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HttpRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perm", wireType)
			}
			m.Perm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Perm |= Permission(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPermission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPermission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPermission(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPermission
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPermission
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPermission
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPermission
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPermission        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPermission          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPermission = fmt.Errorf("proto: unexpected end of group")
)

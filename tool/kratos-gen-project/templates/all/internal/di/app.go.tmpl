package di

import (
	"context"
	"time"

	"{{.ModPrefix}}{{.Name}}/internal/service"
    "{{.ModPrefix}}{{.Name}}/internal/server/grpc"
	"{{.ModPrefix}}{{.Name}}/internal/server/http"
	"github.com/zhangjinglei/wahaha/pkg/log"
	bm "github.com/zhangjinglei/wahaha/pkg/net/http/blademaster"
	"github.com/zhangjinglei/wahaha/pkg/net/rpc/warden"
)

//go:generate kratos tool wire
type App struct {
	http *bm.Engine
	grpc *warden.Server
}

func NewApp( h *bm.Engine, g *warden.Server) (app *App, closeFunc func(), err error){
	app = &App{
		http: h,
		grpc: g,
	}
	closeFunc = func() {
		ctx, cancel := context.WithTimeout(context.Background(), 35*time.Second)
		if err := g.Shutdown(ctx); err != nil {
			log.Error("grpcSrv.Shutdown error(%v)", err)
		}
		if err := h.Shutdown(ctx); err != nil {
			log.Error("httpSrv.Shutdown error(%v)", err)
		}
		cancel()
	}
	return
}

func InitApp() (*App, func(), error) {

	engine, err := http.New(serviceService)
	if err != nil {

		return nil, nil, err
	}
	server, err := grpc.New(serviceService)
	if err != nil {

		return nil, nil, err
	}
	app, cleanup6, err := NewApp( engine, server)
	if err != nil {

		return nil, nil, err
	}
	return app, func() {
		cleanup6()

	}, nil
}